// <auto-generated />
using System;
using App.Distrbute.Common;
using App.Distrbute.Common.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ObjectStorage.Sdk.Dtos;

#nullable disable

namespace App.Distrbute.Common.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250916113237_Add_Data_Protection")]
    partial class Add_Data_Protection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Distrbute.Common.Models.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Location>("Location")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Niches")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DocumentFile>("ProfilePicture")
                        .HasColumnType("jsonb");

                    b.Property<int>("RelevanceScore")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.BrandInvite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("BrandInvites");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.BrandMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("EmailId");

                    b.ToTable("BrandMembers");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.Campaign", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Attachment")
                        .HasColumnType("jsonb");

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Budget")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FundingTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Reach")
                        .HasColumnType("double precision");

                    b.Property<UGCDocumentFile>("RulesOfEngagement")
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubType")
                        .HasColumnType("text");

                    b.Property<string>("TargetedNiches")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TargetedPlatforms")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("FundingTransactionId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.DistrbuteTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<double?>("AmountAfterCharges")
                        .HasColumnType("double precision");

                    b.Property<double?>("AmountDueDistrbute")
                        .HasColumnType("double precision");

                    b.Property<string>("BrandId")
                        .HasColumnType("text");

                    b.Property<double?>("Charges")
                        .HasColumnType("double precision");

                    b.Property<string>("ClientReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Depository>("Destination")
                        .HasColumnType("jsonb");

                    b.Property<string>("DistributorId")
                        .HasColumnType("text");

                    b.Property<string>("IntegrationChannel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LedgerAccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("LedgerActionId")
                        .HasColumnType("integer");

                    b.Property<int?>("LedgerClientId")
                        .HasColumnType("integer");

                    b.Property<int?>("LedgerProductId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentProcessor")
                        .HasColumnType("text");

                    b.Property<string>("PaymentProcessorClientReference")
                        .HasColumnType("text");

                    b.Property<string>("PaymentProcessorDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SettledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Depository>("Source")
                        .HasColumnType("jsonb");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DistributorId");

                    b.ToTable("DistrbuteTransactions");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.Distributor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Location>("Location")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OpenToCollaboration")
                        .HasColumnType("boolean");

                    b.Property<DocumentFile>("ProfilePicture")
                        .HasColumnType("jsonb");

                    b.Property<int>("RelevanceScore")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("Distributors");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.Email", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LedgerClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.SuspenseWallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DistributorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("EmailId");

                    b.ToTable("SuspenseWallets");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("text");

                    b.Property<string>("BrandId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DistributorId")
                        .HasColumnType("text");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderLogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("RecipientCode")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DistributorId");

                    b.HasIndex("EmailId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Persistence.Sdk.Models.Outbox", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AggregateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Outbox");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.Brand", b =>
                {
                    b.HasOne("App.Distrbute.Common.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.BrandInvite", b =>
                {
                    b.HasOne("App.Distrbute.Common.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.BrandMember", b =>
                {
                    b.HasOne("App.Distrbute.Common.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Distrbute.Common.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.Campaign", b =>
                {
                    b.HasOne("App.Distrbute.Common.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Distrbute.Common.Models.DistrbuteTransaction", "FundingTransaction")
                        .WithMany()
                        .HasForeignKey("FundingTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("FundingTransaction");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.DistrbuteTransaction", b =>
                {
                    b.HasOne("App.Distrbute.Common.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("App.Distrbute.Common.Models.Distributor", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId");

                    b.Navigation("Brand");

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.Distributor", b =>
                {
                    b.HasOne("App.Distrbute.Common.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.SuspenseWallet", b =>
                {
                    b.HasOne("App.Distrbute.Common.Models.Distributor", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Distrbute.Common.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distributor");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("App.Distrbute.Common.Models.Wallet", b =>
                {
                    b.HasOne("App.Distrbute.Common.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("App.Distrbute.Common.Models.Distributor", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId");

                    b.HasOne("App.Distrbute.Common.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Distributor");

                    b.Navigation("Email");
                });
#pragma warning restore 612, 618
        }
    }
}
